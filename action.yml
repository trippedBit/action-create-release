name: create-release
description: Creates releases using tags and git logs.

inputs:
    secret-input:
        description: Secret to use
        required: true
    remove-merges:
        description: Option to remove merges from changelog
        default: "false"
    zip-options:
        description: Options for the zip command used in step build_artifacts
        default: ""
    zip-filelist:
        description: List of files to zip
        default: "*"

runs:
    using: composite
    steps:
        - uses: actions/checkout@v3 # checkout branch
          with:
            fetch-depth: 0
        - name: git_fetch # get all tags for next step - uses script to avoid fails due to return codes
          id: git_fetch
          run: ${{ github.action_path }}/fetch.sh
          shell: bash
        - name: build_changelog # now build changelog
          id: build_changelog
          run: |
            bash --version
            echo "Building changelog"

            echo "First get changes between previous and current tag"
            git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1)
            prevtag=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1))
            echo "Previous tag: $prevtag"
            version=v$(echo ${{ github.ref }} | cut -d "v" -f 2)
            echo "New version is $version"

            echo "Number of commits:"
            if [[ ${{ inputs.remove-merges }} == "false" ]] ; then
                echo "Log with merges"
                echo git log $prevtag..$version --pretty=tformat:"%s @%an %h" | wc -l
            else
                echo "Log without merges"
                echo git log $prevtag..$version --no-merges --pretty=tformat:"%s @%an %h" | wc -l
            fi

            if [[ ${{ inputs.remove-merges }} == "false" ]] ; then
                echo "Log with merges"
                gitlog=$(git log $prevtag..$version --pretty=tformat:"%s @%an %h")
            else
                echo "Log without merges"
                gitlog=$(git log $prevtag..$version --no-merges --pretty=tformat:"%s @%an %h")
            fi

            echo "Log entries to process:"
            echo "$gitlog"
            echo ""
            echo ""
            
            ldocs=()
            lfix=()
            ldefault=()
            lbreaking=()

            regexdocs="^[.]*docs(\([a-z]*\))*[!]*:"
            regexfeat="^[.]*feat(\([a-z]*\))*[!]*:"
            regexfix="^[.]*fix(\([a-z]*\))*[!]*:"

            IFS=$'\n'
            logarray=($gitlog)
            unset IFS

            for logentry in "${logarray[@]}" ; do
                echo "Processing entry $logentry"
                if [[ $logentry =~ $regexdocs ]] ; then
                    echo "Adding $logentry to ldocs list"
                    ldocs+=("${logentry}")
                elif [[ $logentry =~ $regexfeat ]] ; then
                    echo "Adding $logentry to lfeat list"
                    lfeat+=("${logentry}")
                elif [[ $logentry =~ $regexfix ]] ; then
                    echo "Adding $logentry to lfix list"
                    lfix+=("${logentry}")
                else
                    echo "Matching no list, adding to default list"
                    ldefault+=("${logentry}")
                fi

                if [[ $logentry == *"!:"* ]] ; then
                    echo "$logentry is breaking"
                    lbreaking+=("${logentry}")
                fi
            done

            echo ""
            echo ""

            echo "Creating changelog now"
            changelog=$'# Changelog\n'

            if [[ ${#lfeat[@]} > 0 ]] ; then
                changelog+=$'## Features\n'
                for entry in "${lfeat[@]}" ; do
                    changelog+="* ${entry}"
                    changelog+=$'\n'
                done
                changelog+=$'\n'
            fi

            if [[ ${#lfix[@]} > 0 ]] ; then
                changelog+=$'## Fixes\n'
                for entry in "${lfix[@]}" ; do
                    changelog+="* ${entry}"
                    changelog+=$'\n'
                done
                changelog+=$'\n'
            fi

            if [[ ${#ldocs[@]} > 0 ]] ; then
                changelog+=$'## Docs\n'
                for entry in "${ldocs[@]}" ; do
                    changelog+="* ${entry}"
                    changelog+=$'\n'
                done
                changelog+=$'\n'
            fi

            if [[ ${#ldefault[@]} > 0 ]] ; then
                changelog+=$'## Others\n'
                for entry in "${ldefault[@]}" ; do
                    changelog+="* ${entry}"
                    changelog+=$'\n'
                done
                changelog+=$'\n'
            fi

            if [[ ${#lbreaking[@]} > 0 ]] ; then
                changelog+=$'## Breaking changes\n'
                for entry in "${lbreaking[@]}<br>" ; do
                    changelog+="* ${entry}"
                    changelog+=$'\n'
                done
                changelog+=$'\n'
            fi

            echo "Created changelog:"
            echo "$changelog"
            echo "$changelog" > CHANGELOG.md
          shell: bash
          continue-on-error: true
        - name: build_artifacts # creates artifact zip
          id: build_artifacts
          run: |
            echo "Build artifacts"
            ls
            version=$(echo ${{ github.ref }} | cut -d "v" -f 2)
            echo "Version is $version"
            zip ${{ inputs.zip-options }} Release_v$version.zip ${{ inputs.zip-filelist }}
          shell: bash
        - name: create_release # creates the release using the changelog as body
          id: create_release
          run: |
            version=$(echo ${{ github.ref }} | cut -d "v" -f 2)
            echo "Version is $version"
            gh release create $version --notes-file CHANGELOG.md Release_v$version.zip
          shell: bash
          env:
            GITHUB_TOKEN: ${{ inputs.secret-input }}