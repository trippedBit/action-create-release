name: create-release
description: Creates releases using tags and git logs.

inputs:
    tagname:
        description: Tag name which will be used as release name
        required: true

runs:
    using: composite
    steps:
        - name: checkout_code
            id: checkout_code
            uses: actions/checkout@v3
        - name: git_fetch # get all tags for next step
            id: git_fetch
            continue-on-error: true
            run: |
            git fetch --tags
            git fetch
        - name: git_log # get changes between current and previous tag and store them in an output variable
            id: git_log
            run: |
            git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1)
            prevtag=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1))
            echo "Previous tag: $prevtag"
            git checkout $prevtag
            version=v$(echo ${{ github.ref }} | cut -d "v" -f 2)
            echo "New version is $version"
            git checkout $version
            echo "gitlog=$(git log $prevtag..$version --pretty=tformat:"%s %an %h")" >> "$GITHUB_OUTPUT"
        - name: build_changelog # now build changelog based on the log from previous step
            id: build_changelog
            shell: bash
            run: |
            bash --version
            echo "Building changelog"
            
            ldocs=()
            lfix=()
            ldefault=()
            lbreaking=()

            regexdocs="^[.]*docs(\([a-z]*\))*[!]*:"
            regexfeat="^[.]*feat(\([a-z]*\))*[!]*:"
            regexfix="^[.]*fix(\([a-z]*\))*[!]*:"

            gitlog=$(git log v1.0.35..HEAD --pretty=tformat:"%s by @%an in %h")

            echo "Log entries to process:"
            echo "$gitlog"

            echo ""
            echo ""

            IFS=$'\n'
            logarray=($gitlog)
            unset IFS

            for logentry in "${logarray[@]}" ; do
                echo "Processing entry $logentry"
                if [[ $logentry =~ $regexdocs ]] ; then
                    echo "Adding $logentry to ldocs list"
                    ldocs+=("${logentry}")
                elif [[ $logentry =~ $regexfeat ]] ; then
                    echo "Adding $logentry to lfeat list"
                    lfeat+=("${logentry}")
                elif [[ $logentry =~ $regexfix ]] ; then
                    echo "Adding $logentry to lfix list"
                    lfix+=("${logentry}")
                else
                    echo "Matching no list, adding to default list"
                    ldefault+=("${logentry}")
                fi

                if [[ $logentry == *"!:"* ]] ; then
                    echo "$logentry is breaking"
                    lbreaking+=("${logentry}")
                fi
            done

            echo ""
            echo ""

            echo "Creating changelog now"
            changelog=$'# Changelog\n'

            if [[ ${#lfeat[@]} > 0 ]] ; then
                changelog+=$'## Features\n'
                for entry in "${lfeat[@]}" ; do
                    changelog+="${entry}"
                done
                changelog+=$'\n'
            fi

            if [[ ${#lfix[@]} > 0 ]] ; then
                changelog+=$'## Fixes\n'
                for entry in "${lfix[@]}" ; do
                    changelog+="${entry}"
                done
                changelog+=$'\n'
            fi

            if [[ ${#ldocs[@]} > 0 ]] ; then
                changelog+=$'## Docs\n'
                for entry in "${ldocs[@]}" ; do
                    changelog+="${entry}"
                done
                changelog+=$'\n'
            fi

            if [[ ${#ldefault[@]} > 0 ]] ; then
                changelog+=$'## Others\n'
                for entry in "${ldefault[@]}" ; do
                    changelog+="${entry}"
                done
            fi

            if [[ ${#lbreaking[@]} > 0 ]] ; then
                changelog+=$'## Breaking changes\n'
                for entry in "${lbreaking[@]}" ; do
                    changelog+="${entry}"
                done
            fi

            echo "Created changelog:"
            echo "$changelog"
            echo "$changelog" > CHANGELOG.md
        - name: create_release
            id: create_release
            uses: actions/create-release@v1.1.4
            env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # provided by actions, no need to create one
            with:
            tag_name: ${{ github.ref }}
            release_name: "Release ${{ github.ref }}"
            body_path: "CHANGELOG.md"
            draft: false
            prerelease: false
        - name: build_artifacts
            id: build_artifacts
            run: |
            echo "Build artifacts"
            ls
            version=$(echo ${{ github.ref }} | cut -d "v" -f 2)
            echo "Version is $version"
            zip Release_v$version.zip requirements.txt
        - name: upload_artifacts
            id: upload_artifacts
            uses: actions/upload-release-asset@v1.0.2
            env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # provided by actions, no need to create one
            with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: ./Release_${{ github.ref_name }}.zip
            asset_name: Release_${{ github.ref_name }}.zip
            asset_content_type: application/zip